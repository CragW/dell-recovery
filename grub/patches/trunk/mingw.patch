This is a collection of patches that make the GRUB2 build work on mingw32.
These were explicitly rejected upstream due to needing rework.

=== modified file 'grub2/grub-core/lib/crypto.c'
Index: grub2-2.00/grub-core/lib/crypto.c
===================================================================
--- grub2-2.00.orig/grub-core/lib/crypto.c	2012-02-08 06:57:20.000000000 -0600
+++ grub2-2.00/grub-core/lib/crypto.c	2013-02-22 00:09:37.730699426 -0600
@@ -24,6 +24,12 @@
 #include <grub/dl.h>
 #include <grub/i18n.h>
 
+/* mingw32 does not support termios as required
+   by GRUB_UTIL throughout this file*/
+#ifdef __MINGW32__
+#undef GRUB_UTIL
+#endif
+
 #ifdef GRUB_UTIL
 #include <termios.h>
 #include <stdlib.h>
Index: grub2-2.00/grub-core/disk/geli.c
===================================================================
--- grub2-2.00.orig/grub-core/disk/geli.c	2012-03-08 06:49:11.000000000 -0600
+++ grub2-2.00/grub-core/disk/geli.c	2013-02-22 00:09:37.730699426 -0600
@@ -221,9 +221,11 @@
   if (fd < 0)
     return NULL;
 
+#if !defined(__MINGW32__)
   s = grub_util_get_fd_size (fd, dev, &log_secsize);
   s >>= log_secsize;
   grub_util_fd_seek (fd, dev, (s << log_secsize) - 512);
+#endif
 
   uuid = xmalloc (GRUB_MD_SHA256->mdlen * 2 + 1);
   if (grub_util_fd_read (fd, (void *) &hdr, 512) < 0)
Index: grub2-2.00/grub-core/commands/blocklist.c
===================================================================
--- grub2-2.00.orig/grub-core/commands/blocklist.c	2012-02-07 17:13:14.000000000 -0600
+++ grub2-2.00/grub-core/commands/blocklist.c	2013-02-22 00:50:02.906637227 -0600
@@ -74,7 +74,7 @@
       if (num_entries++)
 	grub_printf (",");
 
-      grub_printf ("%llu", (unsigned long long) (sector - part_start));
+      grub_printf ("%lu", (unsigned long) (sector - part_start));
       if (num > 0)
 	grub_printf ("+%u", num);
       if (offset != 0 || length != 0)
Index: grub2-2.00/grub-core/commands/testload.c
===================================================================
--- grub2-2.00.orig/grub-core/commands/testload.c	2012-02-24 04:19:50.000000000 -0600
+++ grub2-2.00/grub-core/commands/testload.c	2013-02-22 00:50:56.042635866 -0600
@@ -91,7 +91,7 @@
 
       if (grub_memcmp (sector, buf + pos, curlen) != 0)
 	{
-	  grub_printf ("\nDiffers in %lld\n", (unsigned long long) pos);
+	  grub_printf ("\nDiffers in %ld\n", (unsigned long) pos);
 	  goto fail;
 	}
       pos += curlen;
@@ -120,7 +120,7 @@
 	{
 	  int i;
 
-	  grub_printf ("\nDiffers in %lld\n", (unsigned long long) pos);
+	  grub_printf ("\nDiffers in %ld\n", (unsigned long) pos);
 
 	  for (i = 0; i < GRUB_DISK_SECTOR_SIZE; i++)
 	    {
Index: grub2-2.00/grub-core/commands/ls.c
===================================================================
--- grub2-2.00.orig/grub-core/commands/ls.c	2012-06-25 20:37:07.000000000 -0500
+++ grub2-2.00/grub-core/commands/ls.c	2013-02-22 00:55:31.374628800 -0600
@@ -134,7 +134,7 @@
 	    }
 
 	  if (! human)
-	    grub_printf ("%-12llu", (unsigned long long) file->size);
+	    grub_printf ("%-12lu", (unsigned long) file->size);
 	  else
 	    {
 	      grub_uint64_t fsize = file->size * 100ULL;
@@ -155,13 +155,13 @@
 
 		  whole = grub_divmod64 (fsize, 100, &fraction);
 		  grub_snprintf (buf, sizeof (buf),
-				 "%" PRIuGRUB_UINT64_T
-				 ".%02" PRIuGRUB_UINT64_T "%c", whole, fraction,
+				 "%lu"
+				 ".%02lu" "%c", (unsigned long) whole, (unsigned long) fraction,
 				 grub_human_sizes[units]);
 		  grub_printf ("%-12s", buf);
 		}
 	      else
-		grub_printf ("%-12llu", (unsigned long long) file->size);
+		grub_printf ("%-12lu", (unsigned long) file->size);
 
 	    }
 	  grub_file_close (file);
Index: grub2-2.00/grub-core/fs/bfs.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/bfs.c	2012-05-27 07:29:25.000000000 -0500
+++ grub2-2.00/grub-core/fs/bfs.c	2013-02-22 00:56:10.170627808 -0600
@@ -1072,7 +1072,7 @@
     if (read_bfs_attr (device->disk, &sb, &ino.ino, "be:volume_id",
 		       &vid, sizeof (vid)) == sizeof (vid))
       *uuid =
-	grub_xasprintf ("%016" PRIxGRUB_UINT64_T, grub_bfs_to_cpu64 (vid));
+	grub_xasprintf ("%016lu", (unsigned long) grub_bfs_to_cpu64 (vid));
   }
   return GRUB_ERR_NONE;
 }
Index: grub2-2.00/grub-core/fs/btrfs.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/btrfs.c	2012-05-26 14:44:28.000000000 -0500
+++ grub2-2.00/grub-core/fs/btrfs.c	2013-02-22 01:03:32.638616460 -0600
@@ -410,9 +410,9 @@
     return grub_error (GRUB_ERR_BAD_FS, "too deep btrfs virtual nesting");
 
   grub_dprintf ("btrfs",
-		"retrieving %" PRIxGRUB_UINT64_T
-		" %x %" PRIxGRUB_UINT64_T "\n",
-		key_in->object_id, key_in->type, key_in->offset);
+		"retrieving %lu"
+		" %x %lu"  "\n",
+		(unsigned long) key_in->object_id, key_in->type, (unsigned long) key_in->offset);
 
   while (1)
     {
@@ -442,10 +442,10 @@
 		return err;
 
 	      grub_dprintf ("btrfs",
-			    "internal node (depth %d) %" PRIxGRUB_UINT64_T
-			    " %x %" PRIxGRUB_UINT64_T "\n", depth,
-			    node.key.object_id, node.key.type,
-			    node.key.offset);
+			    "internal node (depth %d) %lu" 
+			    " %x %lu" "\n", depth,
+			    (unsigned long) node.key.object_id, node.key.type,
+			    (unsigned long) node.key.offset);
 
 	      if (key_cmp (&node.key, key_in) == 0)
 		{
@@ -495,9 +495,9 @@
 	      return err;
 
 	    grub_dprintf ("btrfs",
-			  "leaf (depth %d) %" PRIxGRUB_UINT64_T
-			  " %x %" PRIxGRUB_UINT64_T "\n", depth,
-			  leaf.key.object_id, leaf.key.type, leaf.key.offset);
+			  "leaf (depth %d) %lu" 
+			  " %x %lu"  "\n", depth,
+			  (unsigned long) leaf.key.object_id, leaf.key.type, (unsigned long) leaf.key.offset);
 
 	    if (key_cmp (&leaf.key, key_in) == 0)
 	      {
@@ -633,8 +633,8 @@
       grub_size_t chsize;
       grub_disk_addr_t chaddr;
 
-      grub_dprintf ("btrfs", "searching for laddr %" PRIxGRUB_UINT64_T "\n",
-		    addr);
+      grub_dprintf ("btrfs", "searching for laddr %lu" "\n",
+		    (unsigned long) addr);
       for (ptr = data->sblock.bootstrap_mapping;
 	   ptr < data->sblock.bootstrap_mapping
 	   + sizeof (data->sblock.bootstrap_mapping)
@@ -645,9 +645,9 @@
 	    break;
 	  chunk = (struct grub_btrfs_chunk_item *) (key + 1);
 	  grub_dprintf ("btrfs",
-			"%" PRIxGRUB_UINT64_T " %" PRIxGRUB_UINT64_T " \n",
-			grub_le_to_cpu64 (key->offset),
-			grub_le_to_cpu64 (chunk->size));
+			"%lu" " %lu"  " \n",
+			(unsigned long) grub_le_to_cpu64 (key->offset),
+			(unsigned long) grub_le_to_cpu64 (chunk->size));
 	  if (grub_le_to_cpu64 (key->offset) <= addr
 	      && addr < grub_le_to_cpu64 (key->offset)
 	      + grub_le_to_cpu64 (chunk->size))
@@ -699,15 +699,15 @@
 			       "couldn't find the chunk descriptor");
 	  }
 
-	grub_dprintf ("btrfs", "chunk 0x%" PRIxGRUB_UINT64_T
-		      "+0x%" PRIxGRUB_UINT64_T
-		      " (%d stripes (%d substripes) of %"
-		      PRIxGRUB_UINT64_T ")\n",
-		      grub_le_to_cpu64 (key->offset),
-		      grub_le_to_cpu64 (chunk->size),
+	grub_dprintf ("btrfs", "chunk 0x%lu"
+		      "+0x%lu"
+		      " (%d stripes (%d substripes) of %lu"
+		       ")\n",
+		      (unsigned long) grub_le_to_cpu64 (key->offset),
+		      (unsigned long) grub_le_to_cpu64 (chunk->size),
 		      grub_le_to_cpu16 (chunk->nstripes),
 		      grub_le_to_cpu16 (chunk->nsubstripes),
-		      grub_le_to_cpu64 (chunk->stripe_length));
+		      (unsigned long) grub_le_to_cpu64 (chunk->stripe_length));
 
 	switch (grub_le_to_cpu64 (chunk->type)
 		& ~GRUB_BTRFS_CHUNK_TYPE_BITS_DONTCARE)
@@ -794,20 +794,20 @@
 
 		paddr = grub_le_to_cpu64 (stripe->offset) + stripe_offset;
 
-		grub_dprintf ("btrfs", "chunk 0x%" PRIxGRUB_UINT64_T
-			      "+0x%" PRIxGRUB_UINT64_T
-			      " (%d stripes (%d substripes) of %"
-			      PRIxGRUB_UINT64_T ") stripe %" PRIxGRUB_UINT64_T
-			      " maps to 0x%" PRIxGRUB_UINT64_T "\n",
-			      grub_le_to_cpu64 (key->offset),
-			      grub_le_to_cpu64 (chunk->size),
+		grub_dprintf ("btrfs", "chunk 0x%lu"
+			      "+0x%lu" 
+			      " (%d stripes (%d substripes) of %lu"
+			       ") stripe %lu" 
+			      " maps to 0x%lu" "\n",
+			      (unsigned long) grub_le_to_cpu64 (key->offset),
+			      (unsigned long) grub_le_to_cpu64 (chunk->size),
 			      grub_le_to_cpu16 (chunk->nstripes),
 			      grub_le_to_cpu16 (chunk->nsubstripes),
-			      grub_le_to_cpu64 (chunk->stripe_length),
-			      stripen, stripe->offset);
-		grub_dprintf ("btrfs", "reading paddr 0x%" PRIxGRUB_UINT64_T
-			      " for laddr 0x%" PRIxGRUB_UINT64_T "\n", paddr,
-			      addr);
+			      (unsigned long) grub_le_to_cpu64 (chunk->stripe_length),
+			      (unsigned long)stripen, (unsigned long) stripe->offset);
+		grub_dprintf ("btrfs", "reading paddr 0x%lu"
+			      " for laddr 0x%lu"  "\n", (unsigned long) paddr,
+			      (unsigned long) addr);
 
 		dev = find_device (data, stripe->device_id, j);
 		if (!dev)
@@ -1056,10 +1056,10 @@
 	    data->extend =
 	      data->extstart + grub_le_to_cpu64 (data->extent->filled);
 
-	  grub_dprintf ("btrfs", "regular extent 0x%" PRIxGRUB_UINT64_T "+0x%"
-			PRIxGRUB_UINT64_T "\n",
-			grub_le_to_cpu64 (key_out.offset),
-			grub_le_to_cpu64 (data->extent->size));
+	  grub_dprintf ("btrfs", "regular extent 0x%lu" "+0x%lu"
+            "\n",
+			(unsigned long) grub_le_to_cpu64 (key_out.offset),
+			(unsigned long) grub_le_to_cpu64 (data->extent->size));
 	  if (data->extend <= pos)
 	    {
 	      grub_error (GRUB_ERR_BAD_FS, "extent not found");
Index: grub2-2.00/grub-core/fs/hfs.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/hfs.c	2012-06-26 04:12:21.000000000 -0500
+++ grub2-2.00/grub-core/fs/hfs.c	2013-02-22 01:05:05.830614071 -0600
@@ -1335,8 +1335,8 @@
   data = grub_hfs_mount (device->disk);
   if (data && data->sblock.num_serial != 0)
     {
-      *uuid = grub_xasprintf ("%016llx",
-			     (unsigned long long)
+      *uuid = grub_xasprintf ("%016lx",
+			     (unsigned  long)
 			     grub_be_to_cpu64 (data->sblock.num_serial));
     }
   else
Index: grub2-2.00/grub-core/fs/hfsplus.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/hfsplus.c	2012-05-26 15:41:39.000000000 -0500
+++ grub2-2.00/grub-core/fs/hfsplus.c	2013-02-22 01:05:41.806613148 -0600
@@ -1121,8 +1121,8 @@
   data = grub_hfsplus_mount (disk);
   if (data)
     {
-      *uuid = grub_xasprintf ("%016llx",
-			     (unsigned long long)
+      *uuid = grub_xasprintf ("%016lx",
+			     (unsigned long)
 			     grub_be_to_cpu64 (data->volheader.num_serial));
     }
   else
Index: grub2-2.00/grub-core/fs/ntfs.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/ntfs.c	2012-05-26 09:49:40.000000000 -0500
+++ grub2-2.00/grub-core/fs/ntfs.c	2013-02-22 01:06:13.246612343 -0600
@@ -1234,7 +1234,7 @@
   if (data)
     {
       char *ptr;
-      *uuid = grub_xasprintf ("%016llx", (unsigned long long) data->uuid);
+      *uuid = grub_xasprintf ("%016lx", (unsigned long) data->uuid);
       if (*uuid)
 	for (ptr = *uuid; *ptr; ptr++)
 	  *ptr = grub_toupper (*ptr);
Index: grub2-2.00/grub-core/fs/reiserfs.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/reiserfs.c	2012-05-21 18:11:22.000000000 -0500
+++ grub2-2.00/grub-core/fs/reiserfs.c	2013-02-22 01:07:04.482611029 -0600
@@ -1062,10 +1062,10 @@
   current_position = 0;
   final_position = MIN (len + initial_position, node->size);
   grub_dprintf ("reiserfs",
-		"Reading from %lld to %lld (%lld instead of requested %ld)\n",
-		(unsigned long long) initial_position,
-		(unsigned long long) final_position,
-		(unsigned long long) (final_position - initial_position),
+		"Reading from %ld to %ld (%ld instead of requested %ld)\n",
+		(unsigned long ) initial_position,
+		(unsigned long) final_position,
+		(unsigned  long) (final_position - initial_position),
 		(unsigned long) len);
 
   grub_reiserfs_set_key_offset (&key, initial_position + 1);
@@ -1178,8 +1178,8 @@
     }
 
   grub_dprintf ("reiserfs",
-		"Have successfully read %lld bytes (%ld requested)\n",
-		(unsigned long long) (current_position - initial_position),
+		"Have successfully read %ld bytes (%ld requested)\n",
+		(unsigned long) (current_position - initial_position),
 		(unsigned long) len);
   return current_position - initial_position;
 
Index: grub2-2.00/grub-core/fs/zfs/zfs.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/zfs/zfs.c	2012-05-16 09:41:06.000000000 -0500
+++ grub2-2.00/grub-core/fs/zfs/zfs.c	2013-02-22 01:11:22.918604404 -0600
@@ -406,16 +406,16 @@
 		   checksum != ZIO_CHECKSUM_SHA256_MAC ? 32 : 20) != 0)
     {
       grub_dprintf ("zfs", "checksum %s verification failed\n", ci->ci_name);
-      grub_dprintf ("zfs", "actual checksum %016llx %016llx %016llx %016llx\n",
-		    (unsigned long long) actual_cksum.zc_word[0], 
-		    (unsigned long long) actual_cksum.zc_word[1],
-		    (unsigned long long) actual_cksum.zc_word[2], 
-		    (unsigned long long) actual_cksum.zc_word[3]);
-      grub_dprintf ("zfs", "expected checksum %016llx %016llx %016llx %016llx\n",
-		    (unsigned long long) zc.zc_word[0], 
-		    (unsigned long long) zc.zc_word[1],
-		    (unsigned long long) zc.zc_word[2], 
-		    (unsigned long long) zc.zc_word[3]);
+      grub_dprintf ("zfs", "actual checksum %016lx %016lx %016lx %016lx\n",
+		    (unsigned long) actual_cksum.zc_word[0], 
+		    (unsigned long) actual_cksum.zc_word[1],
+		    (unsigned long) actual_cksum.zc_word[2], 
+		    (unsigned long) actual_cksum.zc_word[3]);
+      grub_dprintf ("zfs", "expected checksum %016lx %016lx %016lx %016lx\n",
+		    (unsigned long) zc.zc_word[0], 
+		    (unsigned long) zc.zc_word[1],
+		    (unsigned long) zc.zc_word[2], 
+		    (unsigned long) zc.zc_word[3]);
       return grub_error (GRUB_ERR_BAD_FS, N_("checksum verification failed"));
     }
 
@@ -560,9 +560,9 @@
 static grub_uint64_t
 dva_get_offset (const dva_t *dva, grub_zfs_endian_t endian)
 {
-  grub_dprintf ("zfs", "dva=%llx, %llx\n", 
-		(unsigned long long) dva->dva_word[0], 
-		(unsigned long long) dva->dva_word[1]);
+  grub_dprintf ("zfs", "dva=%lx, %lx\n", 
+		(unsigned long) dva->dva_word[0], 
+		(unsigned long) dva->dva_word[1]);
   return grub_zfs_to_cpu64 ((dva)->dva_word[1], 
 			    endian) << SPA_MINBLOCKSHIFT;
 }
@@ -842,8 +842,8 @@
       grub_free (nvlist);
       return grub_error (GRUB_ERR_NOT_IMPLEMENTED_YET,
 			 "too new version %llu > %llu",
-			 (unsigned long long) version,
-			 (unsigned long long) SPA_VERSION);
+			 (unsigned long) version,
+			 (unsigned long) SPA_VERSION);
     }
   grub_dprintf ("zfs", "check 9 passed\n");
 
@@ -1289,12 +1289,12 @@
 	    if (csize > len)
 	      csize = len;
 
-	    grub_dprintf ("zfs", "RAIDZ mapping 0x%" PRIxGRUB_UINT64_T
+	    grub_dprintf ("zfs", "RAIDZ mapping 0x%lu"
 			  "+%u (%" PRIxGRUB_SIZE ", %" PRIxGRUB_UINT32_T
-			  ") -> (0x%" PRIxGRUB_UINT64_T ", 0x%"
-			  PRIxGRUB_UINT64_T ")\n",
-			  offset >> desc->ashift, c, len, bsize, high,
-			  devn);
+			  ") -> (0x%lu" ", 0x%lu"
+			  ")\n",
+			  (unsigned long) offset >> desc->ashift, c, len, bsize, (unsigned long) high,
+			  (unsigned long) devn);
 	    err = read_device ((high << desc->ashift)
 			       | (offset & ((1 << desc->ashift) - 1)),
 			       &desc->children[devn],
@@ -1639,16 +1639,16 @@
 	    {
 	      grub_free (compbuf);
 	      *buf = NULL;
-	      grub_dprintf ("zfs", "no key for txg %" PRIxGRUB_UINT64_T "\n",
-			    grub_zfs_to_cpu64 (bp->blk_birth,
+	      grub_dprintf ("zfs", "no key for txg %lu" "\n",
+			    (unsigned long) grub_zfs_to_cpu64 (bp->blk_birth,
 					       endian));
 	      return grub_error (GRUB_ERR_BAD_FS, "no key found in keychain");
 	    }
-	  grub_dprintf ("zfs", "using key %u (%" PRIxGRUB_UINT64_T 
-			", %p) for txg %" PRIxGRUB_UINT64_T "\n",
-			besti, data->subvol.keyring[besti].txg,
+	  grub_dprintf ("zfs", "using key %u (%lu" 
+			", %p) for txg %lu" "\n",
+			besti, (unsigned long) data->subvol.keyring[besti].txg,
 			data->subvol.keyring[besti].cipher,
-			grub_zfs_to_cpu64 (bp->blk_birth,
+			(unsigned long) grub_zfs_to_cpu64 (bp->blk_birth,
 					   endian));
 	  err = grub_zfs_decrypt (data->subvol.keyring[besti].cipher,
 				  data->subvol.keyring[besti].algo,
@@ -1795,8 +1795,8 @@
   chunks = objsize / MZAP_ENT_LEN - 1;
   for (i = 0; i < chunks; i++)
     {
-      grub_dprintf ("zfs", "zap: name = %s, value = %llx, cd = %x\n",
-		    mzap_ent[i].mze_name, (long long)mzap_ent[i].mze_value,
+      grub_dprintf ("zfs", "zap: name = %s, value = %lx, cd = %x\n",
+		    mzap_ent[i].mze_name, (long)mzap_ent[i].mze_value,
 		    (int)mzap_ent[i].mze_cd);
       if (hook (mzap_ent[i].mze_name, 
 		grub_zfs_to_cpu64 (mzap_ent[i].mze_value, endian)))
@@ -2353,8 +2353,8 @@
       return GRUB_ERR_NONE;
     }
 
-  grub_dprintf ("zfs", "endian = %d, blkid=%llx\n", mdn->endian, 
-		(unsigned long long) blkid);
+  grub_dprintf ("zfs", "endian = %d, blkid=%lx\n", mdn->endian, 
+		(unsigned long) blkid);
   err = dmu_read (mdn, blkid, &dnbuf, &endian, data);
   if (err)
     return err;
@@ -3447,7 +3447,7 @@
   if (! data)
     return grub_errno;
 
-  *uuid = grub_xasprintf ("%016llx", (long long unsigned) data->guid);
+  *uuid = grub_xasprintf ("%016lx", (long unsigned) data->guid);
   zfs_unmount (data);
   if (! *uuid)
     return grub_errno;
Index: grub2-2.00/grub-core/fs/zfs/zfsinfo.c
===================================================================
--- grub2-2.00.orig/grub-core/fs/zfs/zfsinfo.c	2012-03-03 04:54:34.000000000 -0600
+++ grub2-2.00/grub-core/fs/zfs/zfsinfo.c	2013-02-22 01:12:10.970603166 -0600
@@ -300,7 +300,7 @@
   if (!found)
     grub_puts_ (N_("Pool GUID: unavailable"));
   else
-    grub_printf_ (N_("Pool GUID: %016llx\n"), (long long unsigned) guid);
+    grub_printf_ (N_("Pool GUID: %016lx\n"), (long  unsigned) guid);
 
   found = grub_zfs_nvlist_lookup_uint64 (nvlist, ZPOOL_CONFIG_POOL_STATE,
 					 &pool_state);
@@ -386,8 +386,8 @@
   grub_free (nv);
   grub_free (nvlist);
 
-  bootfs = grub_xasprintf ("zfs-bootfs=%s/%llu%s%s%s%s%s%s",
-			   poolname, (unsigned long long) mdnobj,
+  bootfs = grub_xasprintf ("zfs-bootfs=%s/%lu%s%s%s%s%s%s",
+			   poolname, (unsigned  long) mdnobj,
 			   bootpath ? ",bootpath=\"" : "",
 			   bootpath ? : "",
 			   bootpath ? "\"" : "",
Index: grub2-2.00/grub-core/partmap/msdos.c
===================================================================
--- grub2-2.00.orig/grub-core/partmap/msdos.c	2013-02-22 00:09:37.000000000 -0600
+++ grub2-2.00/grub-core/partmap/msdos.c	2013-02-22 01:12:50.270602161 -0600
@@ -175,10 +175,10 @@
 	  p.msdostype = e->type;
 
 	  grub_dprintf ("partition",
-			"partition %d: flag 0x%x, type 0x%x, start 0x%llx, len 0x%llx\n",
+			"partition %d: flag 0x%x, type 0x%x, start 0x%lx, len 0x%lx\n",
 			p.index, e->flag, e->type,
-			(unsigned long long) p.start,
-			(unsigned long long) p.len);
+			(unsigned long) p.start,
+			(unsigned long) p.len);
 
 	  /* If this partition is a normal one, call the hook.  */
 	  if (! grub_msdos_partition_is_empty (e->type)
Index: grub2-2.00/util/misc.c
===================================================================
--- grub2-2.00.orig/util/misc.c	2012-03-08 06:49:11.000000000 -0600
+++ grub2-2.00/util/misc.c	2013-02-22 01:22:17.058587628 -0600
@@ -148,8 +148,8 @@
 grub_util_write_image_at (const void *img, size_t size, off_t offset, FILE *out,
 			  const char *name)
 {
-  grub_util_info ("writing 0x%" PRIxGRUB_SIZE " bytes at offset 0x%llx",
-		  size, (unsigned long long) offset);
+  grub_util_info ("writing 0x%" PRIxGRUB_SIZE " bytes at offset 0x%lx",
+		  size, (unsigned long) offset);
   if (fseeko (out, offset, SEEK_SET) == -1)
     grub_util_error (_("cannot seek `%s': %s"),
 		     name, strerror (errno));
@@ -325,7 +325,7 @@
     {
       LARGE_INTEGER s;
 
-      s.LowPart = GetFileSize (hd, &s.HighPart);
+      s.LowPart = GetFileSize (hd, (LPDWORD) &s.HighPart);
       size = s.QuadPart;
     }
 
Index: grub2-2.00/grub-core/kern/disk.c
===================================================================
--- grub2-2.00.orig/grub-core/kern/disk.c	2012-06-22 10:26:38.000000000 -0500
+++ grub2-2.00/grub-core/kern/disk.c	2013-02-22 01:23:28.678585787 -0600
@@ -483,8 +483,8 @@
   if (grub_disk_adjust_range (disk, &sector, &offset, size) != GRUB_ERR_NONE)
     {
       grub_error_push ();
-      grub_dprintf ("disk", "Read out of range: sector 0x%llx (%s).\n",
-		    (unsigned long long) sector, grub_errmsg);
+      grub_dprintf ("disk", "Read out of range: sector 0x%lx (%s).\n",
+		    (unsigned long) sector, grub_errmsg);
       grub_error_pop ();
       return grub_errno;
     }
